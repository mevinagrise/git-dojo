#!/opt/pwn.college/bash

# 确保 git 已安装
if ! command -v git >/dev/null 2>&1; then
  apt update && apt install -y git
fi

sudo -u hacker bash <<'EOF'

mkdir -p /tmp/repo
cd /tmp/repo
git init

# 定义作者和邮箱
authors=("Alice" "Bob" "Charlie" "pwnuser")
emails=("alice@example.com" "bob@example.com" "charlie@example.com" "pwn@hust.edu.cn")

# 常用提交前缀
prefixes=("update" "refactor" "add" "remove" "improve" "clean" "change" "optimize" "rework")

# 常用后缀
suffixes=("" "WIP" "quick fix" "final" "test" "minor" "urgent")

# 初始提交（main 分支，2025年5月）
echo "Initial content" > README.md
git config user.name "${authors[0]}"
git config user.email "${emails[0]}"
git add README.md && git commit --date="2025-05-01T10:00:00" -m "Initial commit"

# 创建分支：dev, feature
git branch dev
git branch feature

# 提交计数器
commit_count=1

# 正确答案：准备好要插入的 commits
special_dates=("2025-05-30T06:00:00" "2025-06-10T14:00:00" "2025-06-25T09:30:00" "2025-07-05T16:20:00" "2025-08-18T11:45:00")
special_msgs=("Bugfix in docker" "login bugfix" "BUGFIX: memory leak" "small bugfix in api" "BugFix: typo in docs")
special_inserted=0

# 在不同分支上提交
for branch in master dev feature; do
  git checkout $branch

  if [ "$branch" = "dev" ]; then
    num_commits=80
    # 随机决定在 dev 分支的哪些位置插入 special commits
    insert_positions=($(shuf -i 1-$num_commits -n ${#special_dates[@]}))
  elif [ "$branch" = "master" ]; then
    num_commits=60
  elif [ "$branch" = "feature" ]; then
    num_commits=40
  fi

  for i in $(seq 1 $num_commits); do
    # 如果当前是 dev 分支，且当前提交数在 insert_positions 中，插入一个正确答案
    if [ "$branch" = "dev" ] && [[ " ${insert_positions[*]} " == *" $i "* ]]; then
      idx=$special_inserted
      echo "Special data $idx" >> "special_file$idx"
      git add "special_file$idx"
      echo "${special_dates[$idx]}"
      GIT_AUTHOR_DATE="${special_dates[$idx]}" GIT_COMMITTER_DATE="${special_dates[$idx]}" \
      GIT_AUTHOR_NAME="${authors[$((idx % ${#authors[@]}))]}" GIT_AUTHOR_EMAIL="${emails[$((idx % ${#authors[@]}))]}" \
      GIT_COMMITTER_NAME="${authors[$((idx % ${#authors[@]}))]}" GIT_COMMITTER_EMAIL="${emails[$((idx % ${#authors[@]}))]}" \
      git commit -m "${special_msgs[$idx]}" > /dev/null 2>&1
      special_inserted=$((special_inserted + 1))
    else
      # 创建或修改文件
      echo "Data $commit_count" >> "file${commit_count}"
      git add "file${commit_count}"

      # 随机作者
      idx=$((RANDOM % ${#authors[@]}))

      # 随机日期：2025年5月1日至8月31日
      start_date=$(date -d "2025-05-01" +%s)
      end_date=$(date -d "2025-08-31" +%s)
      range=$((end_date - start_date))
      random_offset=$(( (RANDOM << 15) | RANDOM ))
      random_date=$(( start_date + random_offset % range ))
      commit_date=$(date -d "@$random_date" +"%Y-%m-%dT%H:%M:%S")
      # echo "$commit_date"

      prefix=${prefixes[$((RANDOM % ${#prefixes[@]}))]}
      suffix=${suffixes[$((RANDOM % ${#suffixes[@]}))]}
      msg="$prefix file $commit_count"
      [ -n "$suffix" ] && msg="$msg - $suffix"

      GIT_AUTHOR_DATE="$commit_date" GIT_COMMITTER_DATE="$commit_date" \
      GIT_AUTHOR_NAME="${authors[$idx]}" GIT_AUTHOR_EMAIL="${emails[$idx]}" \
      GIT_COMMITTER_NAME="${authors[$idx]}" GIT_COMMITTER_EMAIL="${emails[$idx]}" \
      git commit -m "$msg" > /dev/null 2>&1

      commit_count=$((commit_count + 1))
    fi
  done
done

git checkout dev

# 生成预期答案文件 /tmp/expected_answer
git log --grep="bugfix" -i --pretty=format:"%h|%an|%ad|%s" --date=format:"%Y-%m-%d" > /tmp/expected_answer

EOF

# root 用户收集
mv /tmp/expected_answer /expected_answer
chown root:root /expected_answer
chmod 400 /expected_answer
